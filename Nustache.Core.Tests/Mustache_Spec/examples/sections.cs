// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using JsonCSharpClassGenerator;

namespace Nustache.Core.Tests.Mustache_Spec.Examples.sections
{

    public class Truthy
    {
        public Truthy(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class Falsey
    {
        public Falsey(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class Context2
    {
        public Context2(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class Context
    {
        public Context(JObject obj)
        {
            this.context = JsonClassHelper.ReadStronglyTypedObject<Context2>(JsonClassHelper.GetJToken<JObject>(obj, "context"));
        }

        public readonly Context2 context;
    }

    public class A
    {
        public A(JObject obj)
        {
            this.one = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "one"));
        }

        public readonly int one;
    }

    public class B
    {
        public B(JObject obj)
        {
            this.two = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "two"));
        }

        public readonly int two;
    }

    public class C
    {
        public C(JObject obj)
        {
            this.three = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "three"));
        }

        public readonly int three;
    }

    public class D
    {
        public D(JObject obj)
        {
            this.four = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "four"));
        }

        public readonly int four;
    }

    public class E
    {
        public E(JObject obj)
        {
            this.five = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "five"));
        }

        public readonly int five;
    }

    public class DeeplyNestedContexts
    {
        public DeeplyNestedContexts(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
            this.b = JsonClassHelper.ReadStronglyTypedObject<B>(JsonClassHelper.GetJToken<JObject>(obj, "b"));
            this.c = JsonClassHelper.ReadStronglyTypedObject<C>(JsonClassHelper.GetJToken<JObject>(obj, "c"));
            this.d = JsonClassHelper.ReadStronglyTypedObject<D>(JsonClassHelper.GetJToken<JObject>(obj, "d"));
            this.e = JsonClassHelper.ReadStronglyTypedObject<E>(JsonClassHelper.GetJToken<JObject>(obj, "e"));
        }

        public readonly A a;
        public readonly B b;
        public readonly C c;
        public readonly D d;
        public readonly E e;
    }

    public class List2
    {
        public List2(JObject obj)
        {
            this.item = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "item"));
        }

        public readonly int item;
    }

    public class List
    {
        public List(JObject obj)
        {
            this.list = (List2[])JsonClassHelper.ReadArray<List2>(JsonClassHelper.GetJToken<JArray>(obj, "list"), JsonClassHelper.ReadStronglyTypedObject<List2>, typeof(List2[]));
        }

        public readonly List2[] list;
    }

    public class EmptyList
    {
        public EmptyList(JObject obj)
        {
            this.list = (object[])JsonClassHelper.ReadArray<object>(JsonClassHelper.GetJToken<JArray>(obj, "list"), JsonClassHelper.ReadObject, typeof(object[]));
        }

        public readonly object[] list;
    }

    public class Doubled
    {
        public Doubled(JObject obj)
        {
            this.two = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "two"));
            this.bool1 = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "bool1"));
        }

        public readonly string two;
        public readonly bool bool1;
    }

    public class NestedTruthy
    {
        public NestedTruthy(JObject obj)
        {
            this.bool1 = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "bool1"));
        }

        public readonly bool bool1;
    }

    public class NestedFalsey
    {
        public NestedFalsey(JObject obj)
        {
            this.bool1 = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "bool1"));
        }

        public readonly bool bool1;
    }

    public class ImplicitIteratorString
    {
        public ImplicitIteratorString(JObject obj)
        {
            this.list = (string[])JsonClassHelper.ReadArray<string>(JsonClassHelper.GetJToken<JArray>(obj, "list"), JsonClassHelper.ReadString, typeof(string[]));
        }

        public readonly string[] list;
    }

    public class ImplicitIteratorInteger
    {
        public ImplicitIteratorInteger(JObject obj)
        {
            this.list = (int[])JsonClassHelper.ReadArray<int>(JsonClassHelper.GetJToken<JArray>(obj, "list"), JsonClassHelper.ReadInteger, typeof(int[]));
        }

        public readonly int[] list;
    }

    public class ImplicitIteratorDecimal
    {
        public ImplicitIteratorDecimal(JObject obj)
        {
            this.list = (double[])JsonClassHelper.ReadArray<double>(JsonClassHelper.GetJToken<JArray>(obj, "list"), JsonClassHelper.ReadFloat, typeof(double[]));
        }

        public readonly double[] list;
    }

    public class B2
    {
        public B2(JObject obj)
        {
            this.c = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "c"));
        }

        public readonly bool c;
    }

    public class A2
    {
        public A2(JObject obj)
        {
            this.b = JsonClassHelper.ReadStronglyTypedObject<B2>(JsonClassHelper.GetJToken<JObject>(obj, "b"));
        }

        public readonly B2 b;
    }

    public class DottedNamesTruthy
    {
        public DottedNamesTruthy(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A2>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
        }

        public readonly A2 a;
    }

    public class B3
    {
        public B3(JObject obj)
        {
            this.c = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "c"));
        }

        public readonly bool c;
    }

    public class A3
    {
        public A3(JObject obj)
        {
            this.b = JsonClassHelper.ReadStronglyTypedObject<B3>(JsonClassHelper.GetJToken<JObject>(obj, "b"));
        }

        public readonly B3 b;
    }

    public class DottedNamesFalsey
    {
        public DottedNamesFalsey(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A3>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
        }

        public readonly A3 a;
    }

    public class A4
    {
        public A4(JObject obj)
        {
        }

    }

    public class DottedNamesBrokenChains
    {
        public DottedNamesBrokenChains(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A4>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
        }

        public readonly A4 a;
    }

    public class SurroundingWhitespace
    {
        public SurroundingWhitespace(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class InternalWhitespace
    {
        public InternalWhitespace(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class IndentedInlineSections
    {
        public IndentedInlineSections(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class StandaloneLines
    {
        public StandaloneLines(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class IndentedStandaloneLines
    {
        public IndentedStandaloneLines(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class StandaloneLineEndings
    {
        public StandaloneLineEndings(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class StandaloneWithoutPreviousLine
    {
        public StandaloneWithoutPreviousLine(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class StandaloneWithoutNewline
    {
        public StandaloneWithoutNewline(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class Padding
    {
        public Padding(JObject obj)
        {
            this.boolean = JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(obj, "boolean"));
        }

        public readonly bool boolean;
    }

    public class sections
    {

        public sections(string json)
            : this(JObject.Parse(json))
        {
        }

        public sections(JObject obj)
        {
            this.Truthy = JsonClassHelper.ReadStronglyTypedObject<Truthy>(JsonClassHelper.GetJToken<JObject>(obj, "Truthy"));
            this.Falsey = JsonClassHelper.ReadStronglyTypedObject<Falsey>(JsonClassHelper.GetJToken<JObject>(obj, "Falsey"));
            this.Context = JsonClassHelper.ReadStronglyTypedObject<Context>(JsonClassHelper.GetJToken<JObject>(obj, "Context"));
            this.DeeplyNestedContexts = JsonClassHelper.ReadStronglyTypedObject<DeeplyNestedContexts>(JsonClassHelper.GetJToken<JObject>(obj, "DeeplyNestedContexts"));
            this.List = JsonClassHelper.ReadStronglyTypedObject<List>(JsonClassHelper.GetJToken<JObject>(obj, "List"));
            this.EmptyList = JsonClassHelper.ReadStronglyTypedObject<EmptyList>(JsonClassHelper.GetJToken<JObject>(obj, "EmptyList"));
            this.Doubled = JsonClassHelper.ReadStronglyTypedObject<Doubled>(JsonClassHelper.GetJToken<JObject>(obj, "Doubled"));
            this.NestedTruthy = JsonClassHelper.ReadStronglyTypedObject<NestedTruthy>(JsonClassHelper.GetJToken<JObject>(obj, "NestedTruthy"));
            this.NestedFalsey = JsonClassHelper.ReadStronglyTypedObject<NestedFalsey>(JsonClassHelper.GetJToken<JObject>(obj, "NestedFalsey"));
            this.ImplicitIteratorString = JsonClassHelper.ReadStronglyTypedObject<ImplicitIteratorString>(JsonClassHelper.GetJToken<JObject>(obj, "ImplicitIteratorString"));
            this.ImplicitIteratorInteger = JsonClassHelper.ReadStronglyTypedObject<ImplicitIteratorInteger>(JsonClassHelper.GetJToken<JObject>(obj, "ImplicitIteratorInteger"));
            this.ImplicitIteratorDecimal = JsonClassHelper.ReadStronglyTypedObject<ImplicitIteratorDecimal>(JsonClassHelper.GetJToken<JObject>(obj, "ImplicitIteratorDecimal"));
            this.DottedNamesTruthy = JsonClassHelper.ReadStronglyTypedObject<DottedNamesTruthy>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesTruthy"));
            this.DottedNamesFalsey = JsonClassHelper.ReadStronglyTypedObject<DottedNamesFalsey>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesFalsey"));
            this.DottedNamesBrokenChains = JsonClassHelper.ReadStronglyTypedObject<DottedNamesBrokenChains>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesBrokenChains"));
            this.SurroundingWhitespace = JsonClassHelper.ReadStronglyTypedObject<SurroundingWhitespace>(JsonClassHelper.GetJToken<JObject>(obj, "SurroundingWhitespace"));
            this.InternalWhitespace = JsonClassHelper.ReadStronglyTypedObject<InternalWhitespace>(JsonClassHelper.GetJToken<JObject>(obj, "InternalWhitespace"));
            this.IndentedInlineSections = JsonClassHelper.ReadStronglyTypedObject<IndentedInlineSections>(JsonClassHelper.GetJToken<JObject>(obj, "IndentedInlineSections"));
            this.StandaloneLines = JsonClassHelper.ReadStronglyTypedObject<StandaloneLines>(JsonClassHelper.GetJToken<JObject>(obj, "StandaloneLines"));
            this.IndentedStandaloneLines = JsonClassHelper.ReadStronglyTypedObject<IndentedStandaloneLines>(JsonClassHelper.GetJToken<JObject>(obj, "IndentedStandaloneLines"));
            this.StandaloneLineEndings = JsonClassHelper.ReadStronglyTypedObject<StandaloneLineEndings>(JsonClassHelper.GetJToken<JObject>(obj, "StandaloneLineEndings"));
            this.StandaloneWithoutPreviousLine = JsonClassHelper.ReadStronglyTypedObject<StandaloneWithoutPreviousLine>(JsonClassHelper.GetJToken<JObject>(obj, "StandaloneWithoutPreviousLine"));
            this.StandaloneWithoutNewline = JsonClassHelper.ReadStronglyTypedObject<StandaloneWithoutNewline>(JsonClassHelper.GetJToken<JObject>(obj, "StandaloneWithoutNewline"));
            this.Padding = JsonClassHelper.ReadStronglyTypedObject<Padding>(JsonClassHelper.GetJToken<JObject>(obj, "Padding"));
        }

        public readonly Truthy Truthy;
        public readonly Falsey Falsey;
        public readonly Context Context;
        public readonly DeeplyNestedContexts DeeplyNestedContexts;
        public readonly List List;
        public readonly EmptyList EmptyList;
        public readonly Doubled Doubled;
        public readonly NestedTruthy NestedTruthy;
        public readonly NestedFalsey NestedFalsey;
        public readonly ImplicitIteratorString ImplicitIteratorString;
        public readonly ImplicitIteratorInteger ImplicitIteratorInteger;
        public readonly ImplicitIteratorDecimal ImplicitIteratorDecimal;
        public readonly DottedNamesTruthy DottedNamesTruthy;
        public readonly DottedNamesFalsey DottedNamesFalsey;
        public readonly DottedNamesBrokenChains DottedNamesBrokenChains;
        public readonly SurroundingWhitespace SurroundingWhitespace;
        public readonly InternalWhitespace InternalWhitespace;
        public readonly IndentedInlineSections IndentedInlineSections;
        public readonly StandaloneLines StandaloneLines;
        public readonly IndentedStandaloneLines IndentedStandaloneLines;
        public readonly StandaloneLineEndings StandaloneLineEndings;
        public readonly StandaloneWithoutPreviousLine StandaloneWithoutPreviousLine;
        public readonly StandaloneWithoutNewline StandaloneWithoutNewline;
        public readonly Padding Padding;
    }

}
