// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using JsonCSharpClassGenerator;

namespace Nustache.Core.Tests.Mustache_Spec.Examples.interpolation
{

    public class BasicInterpolation
    {
        public BasicInterpolation(JObject obj)
        {
            this.subject = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "subject"));
        }

        public readonly string subject;
    }

    public class HTMLEscaping
    {
        public HTMLEscaping(JObject obj)
        {
            this.forbidden = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "forbidden"));
        }

        public readonly string forbidden;
    }

    public class TripleMustache
    {
        public TripleMustache(JObject obj)
        {
            this.forbidden = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "forbidden"));
        }

        public readonly string forbidden;
    }

    public class Ampersand
    {
        public Ampersand(JObject obj)
        {
            this.forbidden = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "forbidden"));
        }

        public readonly string forbidden;
    }

    public class BasicIntegerInterpolation
    {
        public BasicIntegerInterpolation(JObject obj)
        {
            this.mph = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "mph"));
        }

        public readonly int mph;
    }

    public class TripleMustacheIntegerInterpolation
    {
        public TripleMustacheIntegerInterpolation(JObject obj)
        {
            this.mph = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "mph"));
        }

        public readonly int mph;
    }

    public class AmpersandIntegerInterpolation
    {
        public AmpersandIntegerInterpolation(JObject obj)
        {
            this.mph = JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(obj, "mph"));
        }

        public readonly int mph;
    }

    public class BasicDecimalInterpolation
    {
        public BasicDecimalInterpolation(JObject obj)
        {
            this.power = JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(obj, "power"));
        }

        public readonly double power;
    }

    public class TripleMustacheDecimalInterpolation
    {
        public TripleMustacheDecimalInterpolation(JObject obj)
        {
            this.power = JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(obj, "power"));
        }

        public readonly double power;
    }

    public class AmpersandDecimalInterpolation
    {
        public AmpersandDecimalInterpolation(JObject obj)
        {
            this.power = JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(obj, "power"));
        }

        public readonly double power;
    }

    public class Person
    {
        public Person(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class DottedNamesBasicInterpolation
    {
        public DottedNamesBasicInterpolation(JObject obj)
        {
            this.person = JsonClassHelper.ReadStronglyTypedObject<Person>(JsonClassHelper.GetJToken<JObject>(obj, "person"));
        }

        public readonly Person person;
    }

    public class Person2
    {
        public Person2(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class DottedNamesTripleMustacheInterpolation
    {
        public DottedNamesTripleMustacheInterpolation(JObject obj)
        {
            this.person = JsonClassHelper.ReadStronglyTypedObject<Person2>(JsonClassHelper.GetJToken<JObject>(obj, "person"));
        }

        public readonly Person2 person;
    }

    public class Person3
    {
        public Person3(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class DottedNamesAmpersandInterpolation
    {
        public DottedNamesAmpersandInterpolation(JObject obj)
        {
            this.person = JsonClassHelper.ReadStronglyTypedObject<Person3>(JsonClassHelper.GetJToken<JObject>(obj, "person"));
        }

        public readonly Person3 person;
    }

    public class E
    {
        public E(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class D
    {
        public D(JObject obj)
        {
            this.e = JsonClassHelper.ReadStronglyTypedObject<E>(JsonClassHelper.GetJToken<JObject>(obj, "e"));
        }

        public readonly E e;
    }

    public class C
    {
        public C(JObject obj)
        {
            this.d = JsonClassHelper.ReadStronglyTypedObject<D>(JsonClassHelper.GetJToken<JObject>(obj, "d"));
        }

        public readonly D d;
    }

    public class B
    {
        public B(JObject obj)
        {
            this.c = JsonClassHelper.ReadStronglyTypedObject<C>(JsonClassHelper.GetJToken<JObject>(obj, "c"));
        }

        public readonly C c;
    }

    public class A
    {
        public A(JObject obj)
        {
            this.b = JsonClassHelper.ReadStronglyTypedObject<B>(JsonClassHelper.GetJToken<JObject>(obj, "b"));
        }

        public readonly B b;
    }

    public class DottedNamesArbitraryDepth
    {
        public DottedNamesArbitraryDepth(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
        }

        public readonly A a;
    }

    public class A2
    {
        public A2(JObject obj)
        {
        }

    }

    public class DottedNamesBrokenChains
    {
        public DottedNamesBrokenChains(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A2>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
        }

        public readonly A2 a;
    }

    public class B2
    {
        public B2(JObject obj)
        {
        }

    }

    public class A3
    {
        public A3(JObject obj)
        {
            this.b = JsonClassHelper.ReadStronglyTypedObject<B2>(JsonClassHelper.GetJToken<JObject>(obj, "b"));
        }

        public readonly B2 b;
    }

    public class C2
    {
        public C2(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class DottedNamesBrokenChainResolution
    {
        public DottedNamesBrokenChainResolution(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A3>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
            this.c = JsonClassHelper.ReadStronglyTypedObject<C2>(JsonClassHelper.GetJToken<JObject>(obj, "c"));
        }

        public readonly A3 a;
        public readonly C2 c;
    }

    public class E2
    {
        public E2(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class D2
    {
        public D2(JObject obj)
        {
            this.e = JsonClassHelper.ReadStronglyTypedObject<E2>(JsonClassHelper.GetJToken<JObject>(obj, "e"));
        }

        public readonly E2 e;
    }

    public class C3
    {
        public C3(JObject obj)
        {
            this.d = JsonClassHelper.ReadStronglyTypedObject<D2>(JsonClassHelper.GetJToken<JObject>(obj, "d"));
        }

        public readonly D2 d;
    }

    public class B3
    {
        public B3(JObject obj)
        {
            this.c = JsonClassHelper.ReadStronglyTypedObject<C3>(JsonClassHelper.GetJToken<JObject>(obj, "c"));
        }

        public readonly C3 c;
    }

    public class A4
    {
        public A4(JObject obj)
        {
            this.b = JsonClassHelper.ReadStronglyTypedObject<B3>(JsonClassHelper.GetJToken<JObject>(obj, "b"));
        }

        public readonly B3 b;
    }

    public class E3
    {
        public E3(JObject obj)
        {
            this.name = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "name"));
        }

        public readonly string name;
    }

    public class D3
    {
        public D3(JObject obj)
        {
            this.e = JsonClassHelper.ReadStronglyTypedObject<E3>(JsonClassHelper.GetJToken<JObject>(obj, "e"));
        }

        public readonly E3 e;
    }

    public class C4
    {
        public C4(JObject obj)
        {
            this.d = JsonClassHelper.ReadStronglyTypedObject<D3>(JsonClassHelper.GetJToken<JObject>(obj, "d"));
        }

        public readonly D3 d;
    }

    public class B4
    {
        public B4(JObject obj)
        {
            this.c = JsonClassHelper.ReadStronglyTypedObject<C4>(JsonClassHelper.GetJToken<JObject>(obj, "c"));
        }

        public readonly C4 c;
    }

    public class DottedNamesInitialResolution
    {
        public DottedNamesInitialResolution(JObject obj)
        {
            this.a = JsonClassHelper.ReadStronglyTypedObject<A4>(JsonClassHelper.GetJToken<JObject>(obj, "a"));
            this.b = JsonClassHelper.ReadStronglyTypedObject<B4>(JsonClassHelper.GetJToken<JObject>(obj, "b"));
        }

        public readonly A4 a;
        public readonly B4 b;
    }

    public class InterpolationSurroundingWhitespace
    {
        public InterpolationSurroundingWhitespace(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class TripleMustacheSurroundingWhitespace
    {
        public TripleMustacheSurroundingWhitespace(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class AmpersandSurroundingWhitespace
    {
        public AmpersandSurroundingWhitespace(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class InterpolationStandalone
    {
        public InterpolationStandalone(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class TripleMustacheStandalone
    {
        public TripleMustacheStandalone(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class AmpersandStandalone
    {
        public AmpersandStandalone(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class InterpolationWithPadding
    {
        public InterpolationWithPadding(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class TripleMustacheWithPadding
    {
        public TripleMustacheWithPadding(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class AmpersandWithPadding
    {
        public AmpersandWithPadding(JObject obj)
        {
            this.string1 = JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(obj, "string1"));
        }

        public readonly string string1;
    }

    public class interpolation
    {

        public interpolation(string json)
            : this(JObject.Parse(json))
        {
        }

        public interpolation(JObject obj)
        {
            this.BasicInterpolation = JsonClassHelper.ReadStronglyTypedObject<BasicInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "BasicInterpolation"));
            this.HTMLEscaping = JsonClassHelper.ReadStronglyTypedObject<HTMLEscaping>(JsonClassHelper.GetJToken<JObject>(obj, "HTMLEscaping"));
            this.TripleMustache = JsonClassHelper.ReadStronglyTypedObject<TripleMustache>(JsonClassHelper.GetJToken<JObject>(obj, "TripleMustache"));
            this.Ampersand = JsonClassHelper.ReadStronglyTypedObject<Ampersand>(JsonClassHelper.GetJToken<JObject>(obj, "Ampersand"));
            this.BasicIntegerInterpolation = JsonClassHelper.ReadStronglyTypedObject<BasicIntegerInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "BasicIntegerInterpolation"));
            this.TripleMustacheIntegerInterpolation = JsonClassHelper.ReadStronglyTypedObject<TripleMustacheIntegerInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "TripleMustacheIntegerInterpolation"));
            this.AmpersandIntegerInterpolation = JsonClassHelper.ReadStronglyTypedObject<AmpersandIntegerInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "AmpersandIntegerInterpolation"));
            this.BasicDecimalInterpolation = JsonClassHelper.ReadStronglyTypedObject<BasicDecimalInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "BasicDecimalInterpolation"));
            this.TripleMustacheDecimalInterpolation = JsonClassHelper.ReadStronglyTypedObject<TripleMustacheDecimalInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "TripleMustacheDecimalInterpolation"));
            this.AmpersandDecimalInterpolation = JsonClassHelper.ReadStronglyTypedObject<AmpersandDecimalInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "AmpersandDecimalInterpolation"));
            this.DottedNamesBasicInterpolation = JsonClassHelper.ReadStronglyTypedObject<DottedNamesBasicInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesBasicInterpolation"));
            this.DottedNamesTripleMustacheInterpolation = JsonClassHelper.ReadStronglyTypedObject<DottedNamesTripleMustacheInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesTripleMustacheInterpolation"));
            this.DottedNamesAmpersandInterpolation = JsonClassHelper.ReadStronglyTypedObject<DottedNamesAmpersandInterpolation>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesAmpersandInterpolation"));
            this.DottedNamesArbitraryDepth = JsonClassHelper.ReadStronglyTypedObject<DottedNamesArbitraryDepth>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesArbitraryDepth"));
            this.DottedNamesBrokenChains = JsonClassHelper.ReadStronglyTypedObject<DottedNamesBrokenChains>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesBrokenChains"));
            this.DottedNamesBrokenChainResolution = JsonClassHelper.ReadStronglyTypedObject<DottedNamesBrokenChainResolution>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesBrokenChainResolution"));
            this.DottedNamesInitialResolution = JsonClassHelper.ReadStronglyTypedObject<DottedNamesInitialResolution>(JsonClassHelper.GetJToken<JObject>(obj, "DottedNamesInitialResolution"));
            this.InterpolationSurroundingWhitespace = JsonClassHelper.ReadStronglyTypedObject<InterpolationSurroundingWhitespace>(JsonClassHelper.GetJToken<JObject>(obj, "InterpolationSurroundingWhitespace"));
            this.TripleMustacheSurroundingWhitespace = JsonClassHelper.ReadStronglyTypedObject<TripleMustacheSurroundingWhitespace>(JsonClassHelper.GetJToken<JObject>(obj, "TripleMustacheSurroundingWhitespace"));
            this.AmpersandSurroundingWhitespace = JsonClassHelper.ReadStronglyTypedObject<AmpersandSurroundingWhitespace>(JsonClassHelper.GetJToken<JObject>(obj, "AmpersandSurroundingWhitespace"));
            this.InterpolationStandalone = JsonClassHelper.ReadStronglyTypedObject<InterpolationStandalone>(JsonClassHelper.GetJToken<JObject>(obj, "InterpolationStandalone"));
            this.TripleMustacheStandalone = JsonClassHelper.ReadStronglyTypedObject<TripleMustacheStandalone>(JsonClassHelper.GetJToken<JObject>(obj, "TripleMustacheStandalone"));
            this.AmpersandStandalone = JsonClassHelper.ReadStronglyTypedObject<AmpersandStandalone>(JsonClassHelper.GetJToken<JObject>(obj, "AmpersandStandalone"));
            this.InterpolationWithPadding = JsonClassHelper.ReadStronglyTypedObject<InterpolationWithPadding>(JsonClassHelper.GetJToken<JObject>(obj, "InterpolationWithPadding"));
            this.TripleMustacheWithPadding = JsonClassHelper.ReadStronglyTypedObject<TripleMustacheWithPadding>(JsonClassHelper.GetJToken<JObject>(obj, "TripleMustacheWithPadding"));
            this.AmpersandWithPadding = JsonClassHelper.ReadStronglyTypedObject<AmpersandWithPadding>(JsonClassHelper.GetJToken<JObject>(obj, "AmpersandWithPadding"));
        }

        public readonly BasicInterpolation BasicInterpolation;
        public readonly HTMLEscaping HTMLEscaping;
        public readonly TripleMustache TripleMustache;
        public readonly Ampersand Ampersand;
        public readonly BasicIntegerInterpolation BasicIntegerInterpolation;
        public readonly TripleMustacheIntegerInterpolation TripleMustacheIntegerInterpolation;
        public readonly AmpersandIntegerInterpolation AmpersandIntegerInterpolation;
        public readonly BasicDecimalInterpolation BasicDecimalInterpolation;
        public readonly TripleMustacheDecimalInterpolation TripleMustacheDecimalInterpolation;
        public readonly AmpersandDecimalInterpolation AmpersandDecimalInterpolation;
        public readonly DottedNamesBasicInterpolation DottedNamesBasicInterpolation;
        public readonly DottedNamesTripleMustacheInterpolation DottedNamesTripleMustacheInterpolation;
        public readonly DottedNamesAmpersandInterpolation DottedNamesAmpersandInterpolation;
        public readonly DottedNamesArbitraryDepth DottedNamesArbitraryDepth;
        public readonly DottedNamesBrokenChains DottedNamesBrokenChains;
        public readonly DottedNamesBrokenChainResolution DottedNamesBrokenChainResolution;
        public readonly DottedNamesInitialResolution DottedNamesInitialResolution;
        public readonly InterpolationSurroundingWhitespace InterpolationSurroundingWhitespace;
        public readonly TripleMustacheSurroundingWhitespace TripleMustacheSurroundingWhitespace;
        public readonly AmpersandSurroundingWhitespace AmpersandSurroundingWhitespace;
        public readonly InterpolationStandalone InterpolationStandalone;
        public readonly TripleMustacheStandalone TripleMustacheStandalone;
        public readonly AmpersandStandalone AmpersandStandalone;
        public readonly InterpolationWithPadding InterpolationWithPadding;
        public readonly TripleMustacheWithPadding TripleMustacheWithPadding;
        public readonly AmpersandWithPadding AmpersandWithPadding;
    }

}
